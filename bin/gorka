#!/bin/bash

# Gorka - Agent System Installer
# Usage: gorka install [global|workspace]

set -e

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
AGENTS_DIR="$(dirname "$SCRIPT_DIR")"

# GitHub repository configuration
GITHUB_REPO="gork-labs/gorka"
GITHUB_BRANCH="main"

# Local cache directory for downloaded files
CACHE_DIR="$HOME/.local/share/gorka"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1" >&2
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

print_step() {
    echo -e "${CYAN}[STEP]${NC} $1" >&2
}

# Function to ensure cache directory exists and files are available
ensure_files_available() {
    # If files exist locally (development setup), use them
    if [ -f "$AGENTS_DIR/mcp.json" ] && [ -d "$AGENTS_DIR/agents" ]; then
        print_info "Using local development files from $AGENTS_DIR"
        echo "$AGENTS_DIR"
        return 0
    fi

    # Otherwise, use cache directory and clone/pull repository
    local repo_dir="$CACHE_DIR/repo"

    if [ ! -d "$repo_dir" ]; then
        print_info "Cloning repository to cache..."
        mkdir -p "$CACHE_DIR"

        if command -v git >/dev/null 2>&1; then
            if git clone "https://github.com/${GITHUB_REPO}.git" "$repo_dir" >/dev/null 2>&1; then
                print_success "Repository cloned successfully"
            else
                print_error "Failed to clone repository from https://github.com/${GITHUB_REPO}.git"
                return 1
            fi
        else
            print_error "Git is not available. Please install git."
            return 1
        fi
    else
        print_info "Updating repository cache..."

        if command -v git >/dev/null 2>&1; then
            if (cd "$repo_dir" && git pull origin "$GITHUB_BRANCH" >/dev/null 2>&1); then
                print_success "Repository updated successfully"
            else
                print_warning "Failed to update repository. Using cached version."
            fi
        else
            print_warning "Git is not available. Using cached version."
        fi
    fi

    # Verify required files exist in the cloned repository
    if [ ! -f "$repo_dir/mcp.json" ] || [ ! -d "$repo_dir/agents" ]; then
        print_error "Required files not found in cloned repository"
        return 1
    fi

    print_success "All required files are available from repository"
    echo "$repo_dir"
    return 0
}

# Function to get gorka metadata file path based on scope
get_gorka_metadata_file() {
    local scope="$1"

    case "$scope" in
        "global")
            case "$(uname)" in
                "Darwin")  # macOS
                    echo "$HOME/Library/Application Support/Code/User/gorka.json"
                    ;;
                "Linux")
                    echo "$HOME/.config/Code/User/gorka.json"
                    ;;
                *)
                    print_error "Unsupported operating system"
                    return 1
                    ;;
            esac
            ;;
        "workspace")
            echo ".vscode/gorka.json"
            ;;
        *)
            print_error "Invalid scope: $scope. Use 'global' or 'workspace'"
            return 1
            ;;
    esac
}

# Function to read gorka metadata
read_gorka_metadata() {
    local scope="$1"
    local gorka_file

    gorka_file=$(get_gorka_metadata_file "$scope")
    if [ $? -ne 0 ]; then
        return 1
    fi

    # Initialize empty metadata if file doesn't exist
    if [ ! -f "$gorka_file" ]; then
        echo '{"servers": [], "inputs": [], "chatmodes": [], "instructions": []}' > "$gorka_file"
    fi

    cat "$gorka_file"
}

# Function to update gorka metadata
update_gorka_metadata() {
    local scope="$1"
    local component_type="$2"
    local component_list="$3"
    local operation="$4"  # "add" or "set"

    local gorka_file
    gorka_file=$(get_gorka_metadata_file "$scope")
    if [ $? -ne 0 ]; then
        return 1
    fi

    # Ensure the file exists
    read_gorka_metadata "$scope" >/dev/null

    case "$operation" in
        "add")
            # Add components to existing list
            jq --argjson new_items "$(echo "$component_list" | jq -R -s 'split("\n") | map(select(length > 0))')" \
               --arg type "$component_type" \
               '.[$type] = (.[$type] // [] | . + $new_items | unique | sort)' \
               "$gorka_file" > "$gorka_file.tmp" && mv "$gorka_file.tmp" "$gorka_file"
            ;;
        "set")
            # Replace the entire list (with deduplication)
            jq --argjson new_items "$(echo "$component_list" | jq -R -s 'split("\n") | map(select(length > 0))')" \
               --arg type "$component_type" \
               '.[$type] = ($new_items | unique | sort)' \
               "$gorka_file" > "$gorka_file.tmp" && mv "$gorka_file.tmp" "$gorka_file"
            ;;
        *)
            print_error "Invalid operation: $operation. Use 'add' or 'set'"
            return 1
            ;;
    esac
}

# Function to remove component from gorka metadata
remove_from_gorka_metadata() {
    local scope="$1"
    local component_type="$2"
    local component_name="$3"

    local gorka_file
    gorka_file=$(get_gorka_metadata_file "$scope")
    if [ $? -ne 0 ]; then
        return 1
    fi

    if [ ! -f "$gorka_file" ]; then
        print_error "Gorka metadata file not found: $gorka_file"
        return 1
    fi

    jq --arg type "$component_type" \
       --arg name "$component_name" \
       '.[$type] = (.[$type] // [] | map(select(. != $name)))' \
       "$gorka_file" > "$gorka_file.tmp" && mv "$gorka_file.tmp" "$gorka_file"
}

# Function to check if component is gorka-managed
is_gorka_managed() {
    local scope="$1"
    local component_type="$2"
    local component_name="$3"

    local gorka_file
    gorka_file=$(get_gorka_metadata_file "$scope")
    if [ $? -ne 0 ]; then
        return 1
    fi

    if [ ! -f "$gorka_file" ]; then
        return 1
    fi

    jq -e --arg type "$component_type" \
          --arg name "$component_name" \
          '.[$type] // [] | index($name)' \
          "$gorka_file" >/dev/null 2>&1
}

# Function to merge JSON files with separate gorka metadata tracking
merge_mcp_json() {
    local source_file="$1"
    local target_file="$2"
    local scope="$3"
    local chatmodes_list="$4"
    local instructions_list="$5"

    # Ensure target directory exists
    mkdir -p "$(dirname "$target_file")"

    if [ -f "$target_file" ]; then
        # Read existing gorka metadata to check for conflicts
        local metadata
        metadata=$(read_gorka_metadata "$scope")

        local gorka_managed_servers
        gorka_managed_servers=$(echo "$metadata" | jq -r '.servers // [] | .[]' 2>/dev/null || echo "")

        # Get new servers from source
        new_servers=$(jq -r '.servers // {} | keys[]' "$source_file" 2>/dev/null || echo "")

        # Check for conflicts with non-gorka managed items
        for server in $new_servers; do
            # Check if server exists but is not gorka-managed
            if jq -e --arg server "$server" '.servers | has($server)' "$target_file" >/dev/null 2>&1; then
                if ! echo "$gorka_managed_servers" | grep -q "^$server$"; then
                    print_error "Server '$server' already exists in $target_file and is not managed by gorka"
                    print_error "Please resolve conflicts manually or remove the server before proceeding."
                    exit 1
                fi
            fi
        done

        # Merge MCP configuration (pure configuration, no metadata)
        jq --slurpfile source <(cat "$source_file") \
           '
           . as $target |
           $source[0] as $src |
           $target |
           .servers = (
               ($target.servers // {}) as $existing_servers |
               ($src.servers // {}) as $new_servers |
               $existing_servers + (
                   $new_servers | to_entries | map(
                       .key as $server_name |
                       .value as $new_config |
                       ($existing_servers[$server_name] // {}) as $existing_config |
                       {
                           key: $server_name,
                           value: ($new_config + {
                               env: (($existing_config.env // {}) + ($new_config.env // {}))
                           })
                       }
                   ) | from_entries
               )
           ) |
           .inputs = ((.inputs // []) + ($src.inputs // []) | unique_by(.id))
           ' "$target_file" > "$target_file.tmp"

        mv "$target_file.tmp" "$target_file"
        print_success "Successfully merged MCP configuration."
    else
        # Create new file (ensure no metadata is included)
        jq 'del(."$gorka")' "$source_file" > "$target_file"
        print_success "Created new MCP configuration file."
    fi

    # Update gorka metadata separately
    local all_servers
    local all_input_ids
    all_servers=$(jq -r '.servers // {} | keys[]' "$target_file" 2>/dev/null | tr '\n' '\n')
    # Fix: Store only input IDs, not the full input objects
    all_input_ids=$(jq -r '.inputs // [] | .[].id' "$target_file" 2>/dev/null | tr '\n' '\n')

    # Update metadata for all component types
    update_gorka_metadata "$scope" "servers" "$all_servers" "set"
    update_gorka_metadata "$scope" "inputs" "$all_input_ids" "set"
    update_gorka_metadata "$scope" "chatmodes" "$chatmodes_list" "set"

    if [ "$scope" = "workspace" ]; then
        update_gorka_metadata "$scope" "instructions" "$instructions_list" "set"
    fi
}

# Function to install global configuration
# Function to install workspace configuration
install() {
    print_step "Installing Gorka agent system..."

    local current_dir="$(pwd)"
    local vscode_dir="$current_dir/.vscode"
    local github_dir="$current_dir/.github"

    # Create .vscode directory if it doesn't exist
    if [ ! -d "$vscode_dir" ]; then
        print_info "Creating .vscode directory..."
        mkdir -p "$vscode_dir"
    fi

    # Create .github directory if it doesn't exist
    if [ ! -d "$github_dir" ]; then
        print_info "Creating .github directory..."
        mkdir -p "$github_dir"
    fi

    # Ensure files are available (either locally or from repository)
    FILES_DIR=$(ensure_files_available)
    if [ $? -ne 0 ]; then
        print_error "Failed to ensure required files are available"
        exit 1
    fi

    # Check if mcp.json exists
    if [ ! -f "$FILES_DIR/mcp.json" ]; then
        print_error "MCP configuration file not found"
        exit 1
    fi

    # Build lists of chatmodes and instructions being installed
    chatmodes_list=""
    instructions_list=""

    if [ -d "$FILES_DIR/agents" ]; then
        print_info "Copying chatmodes to workspace .github directory..."
        # Create chatmodes directory and copy the agent files
        mkdir -p "$github_dir/chatmodes"
        cp "$FILES_DIR/agents"/*.md "$github_dir/chatmodes/" 2>/dev/null || true
        print_success "Chatmodes copied to: .github/chatmodes"
        chatmodes_list=$(find "$FILES_DIR/agents" -name "*.md" -exec basename {} \; | tr '\n' '\n')
    fi

    if [ -d "$FILES_DIR/instructions" ]; then
        print_info "Copying instructions to workspace .github directory..."
        cp -r "$FILES_DIR/instructions" "$github_dir/"
        print_success "Instructions copied to: .github/instructions"
        instructions_list=$(find "$FILES_DIR/instructions" -name "*.md" -exec basename {} \; | tr '\n' '\n')
    fi

    # Install MCP configuration
    print_info "Installing MCP configuration..."
    merge_mcp_json "$FILES_DIR/mcp.json" "$vscode_dir/mcp.json" "workspace" "$chatmodes_list" "$instructions_list"
    print_success "MCP configuration installed to: .vscode/mcp.json"

    # Create memory.json file for the memory server
    print_info "Creating memory.json file..."
    touch "$vscode_dir/memory.json"
    print_success "Memory file created at: .vscode/memory.json"

    print_success "Installation completed successfully!"
}

# Function to clean cache
clean_cache() {
    print_step "Cleaning cache..."

    if [ -d "$CACHE_DIR" ]; then
        print_info "Removing cache directory: $CACHE_DIR"
        rm -rf "$CACHE_DIR"
        print_success "Cache cleaned successfully!"
    else
        print_info "Cache directory does not exist, nothing to clean."
    fi
}

# Function to get current components status
get_current_components() {
    local target_type="$1"  # "global" or "workspace"

    case "$target_type" in
        "global")
            case "$(uname)" in
                "Darwin")  # macOS
                    VSCODE_USER_DIR="$HOME/Library/Application Support/Code/User"
                    ;;
                "Linux")
                    VSCODE_USER_DIR="$HOME/.config/Code/User"
                    ;;
                *)
                    print_error "Unsupported operating system"
                    return 1
                    ;;
            esac
            local chatmodes_dir="$VSCODE_USER_DIR/chatmodes"
            ;;
        "workspace")
            local chatmodes_dir=".github/chatmodes"
            local instructions_dir=".github/instructions"
            ;;
    esac

    echo "=== Current $target_type Components ==="

    # Read gorka metadata
    local metadata
    metadata=$(read_gorka_metadata "$target_type" 2>/dev/null)

    if [ $? -eq 0 ] && [ -n "$metadata" ]; then
        echo ""
        echo "MCP Servers (gorka-managed):"
        echo "$metadata" | jq -r '.servers // [] | .[]' 2>/dev/null | while read server; do
            if [ -n "$server" ]; then
                echo "  ✓ $server"
            fi
        done

        echo ""
        echo "MCP Inputs (gorka-managed):"
        echo "$metadata" | jq -r '.inputs // [] | .[]' 2>/dev/null | while read input; do
            if [ -n "$input" ]; then
                echo "  ✓ $input"
            fi
        done

        echo ""
        echo "Chatmodes (gorka-managed):"
        echo "$metadata" | jq -r '.chatmodes // [] | .[]' 2>/dev/null | while read chatmode; do
            if [ -n "$chatmode" ]; then
                if [ -f "$chatmodes_dir/$chatmode" ]; then
                    echo "  ✓ $chatmode"
                else
                    echo "  ✗ $chatmode (missing file)"
                fi
            fi
        done

        if [ "$target_type" = "workspace" ]; then
            echo ""
            echo "Instructions (gorka-managed):"
            echo "$metadata" | jq -r '.instructions // [] | .[]' 2>/dev/null | while read instruction; do
                if [ -n "$instruction" ]; then
                    if [ -f "$instructions_dir/$instruction" ]; then
                        echo "  ✓ $instruction"
                    else
                        echo "  ✗ $instruction (missing file)"
                    fi
                fi
            done
        fi
    else
        echo "No gorka metadata found for $target_type scope"
        echo "Run 'gorka update sync' to initialize."
    fi
    echo ""
}

# Function to list available components from repository
get_available_components() {
    print_step "Checking available components from repository..."

    FILES_DIR=$(ensure_files_available)
    if [ $? -ne 0 ]; then
        print_error "Failed to ensure required files are available"
        return 1
    fi

    echo "=== Available Components ==="

    echo ""
    echo "MCP Servers (global):"
    if [ -f "$FILES_DIR/mcp.json" ]; then
        jq -r '.servers // {} | keys[]' "$FILES_DIR/mcp.json" 2>/dev/null | while read server; do
            if [ -n "$server" ]; then
                echo "  • $server"
            fi
        done
    fi

    echo ""
    echo "MCP Servers (workspace):"
    if [ -f "$FILES_DIR/mcp.workspace.json" ]; then
        jq -r '.servers // {} | keys[]' "$FILES_DIR/mcp.workspace.json" 2>/dev/null | while read server; do
            if [ -n "$server" ]; then
                echo "  • $server"
            fi
        done
    fi

    echo ""
    echo "Chatmodes:"
    if [ -d "$FILES_DIR/agents" ]; then
        find "$FILES_DIR/agents" -name "*.md" -exec basename {} \; | while read chatmode; do
            if [ -n "$chatmode" ]; then
                echo "  • $chatmode"
            fi
        done
    fi

    echo ""
    echo "Instructions:"
    if [ -d "$FILES_DIR/instructions" ]; then
        find "$FILES_DIR/instructions" -name "*.md" -exec basename {} \; | while read instruction; do
            if [ -n "$instruction" ]; then
                echo "  • $instruction"
            fi
        done
    fi
    echo ""
}

# Function to sync components
sync_components() {
    print_step "Syncing components with repository..."
    install
    print_success "Sync completed successfully!"
}

# Function to remove gorka-managed component
remove_component() {
    local component_type="$1"
    local component_name="$2"
    local target_scope="$3"  # "global" or "workspace"

    if [ -z "$component_type" ] || [ -z "$component_name" ]; then
        print_error "Usage: gorka update remove <type> <name> [global|workspace]"
        print_info "Types: server, input, chatmode, instruction"
        return 1
    fi

    case "$target_scope" in
        "global")
            case "$(uname)" in
                "Darwin")  # macOS
                    VSCODE_USER_DIR="$HOME/Library/Application Support/Code/User"
                    ;;
                "Linux")
                    VSCODE_USER_DIR="$HOME/.config/Code/User"
                    ;;
                *)
                    print_error "Unsupported operating system"
                    return 1
                    ;;
            esac
            local mcp_file="$VSCODE_USER_DIR/mcp.json"
            local chatmodes_dir="$VSCODE_USER_DIR/chatmodes"
            local instructions_dir=""  # Global doesn't have instructions
            ;;
        "workspace"|"")
            local mcp_file=".vscode/mcp.json"
            local chatmodes_dir=".github/chatmodes"
            local instructions_dir=".github/instructions"
            target_scope="workspace"  # Default to workspace
            ;;
        *)
            print_error "Invalid scope: $target_scope"
            print_info "Valid scopes: global, workspace"
            return 1
            ;;
    esac

    print_step "Removing $component_type '$component_name' from $target_scope configuration..."

    case "$component_type" in
        "server")
            # Check if server is gorka-managed
            if ! is_gorka_managed "$target_scope" "servers" "$component_name"; then
                print_error "Server '$component_name' is not managed by gorka or doesn't exist"
                return 1
            fi

            # Remove server from mcp.json
            if [ -f "$mcp_file" ]; then
                jq --arg server "$component_name" 'del(.servers[$server])' "$mcp_file" > "$mcp_file.tmp" && mv "$mcp_file.tmp" "$mcp_file"
            fi

            # Remove from gorka metadata
            remove_from_gorka_metadata "$target_scope" "servers" "$component_name"

            print_success "Removed server '$component_name'"
            ;;

        "input")
            # Check if input is gorka-managed
            if ! is_gorka_managed "$target_scope" "inputs" "$component_name"; then
                print_error "Input '$component_name' is not managed by gorka or doesn't exist"
                return 1
            fi

            # Remove input from mcp.json
            if [ -f "$mcp_file" ]; then
                jq --arg input "$component_name" '.inputs = (.inputs // [] | map(select(. != $input)))' "$mcp_file" > "$mcp_file.tmp" && mv "$mcp_file.tmp" "$mcp_file"
            fi

            # Remove from gorka metadata
            remove_from_gorka_metadata "$target_scope" "inputs" "$component_name"

            print_success "Removed input '$component_name'"
            ;;

        "chatmode")
            # Check if chatmode is gorka-managed
            if ! is_gorka_managed "$target_scope" "chatmodes" "$component_name"; then
                print_error "Chatmode '$component_name' is not managed by gorka or doesn't exist"
                return 1
            fi

            # Remove chatmode file
            if [ -f "$chatmodes_dir/$component_name" ]; then
                rm "$chatmodes_dir/$component_name"
                print_info "Removed chatmode file: $chatmodes_dir/$component_name"
            fi

            # Remove from gorka metadata
            remove_from_gorka_metadata "$target_scope" "chatmodes" "$component_name"

            print_success "Removed chatmode '$component_name'"
            ;;

        "instruction")
            if [ "$target_scope" = "global" ]; then
                print_error "Instructions are not available in global scope"
                return 1
            fi

            # Check if instruction is gorka-managed
            if ! is_gorka_managed "$target_scope" "instructions" "$component_name"; then
                print_error "Instruction '$component_name' is not managed by gorka or doesn't exist"
                return 1
            fi

            # Remove instruction file
            if [ -f "$instructions_dir/$component_name" ]; then
                rm "$instructions_dir/$component_name"
                print_info "Removed instruction file: $instructions_dir/$component_name"
            fi

            # Remove from gorka metadata
            remove_from_gorka_metadata "$target_scope" "instructions" "$component_name"

            print_success "Removed instruction '$component_name'"
            ;;

        *)
            print_error "Invalid component type: $component_type"
            print_info "Valid types: server, input, chatmode, instruction"
            return 1
            ;;
    esac
}

# Function to clean orphaned components
clean_orphans() {
    local target_scope="$1"  # "global", "workspace", or "both"

    print_step "Cleaning orphaned gorka-managed components..."

    FILES_DIR=$(ensure_files_available)
    if [ $? -ne 0 ]; then
        print_error "Failed to ensure required files are available"
        return 1
    fi

    local cleaned_count=0

    # Helper function to clean orphans for a specific scope
    clean_orphans_for_scope() {
        local scope="$1"
        local mcp_file="$2"
        local chatmodes_dir="$3"
        local instructions_dir="$4"

        print_info "Checking $scope scope..."

        # Read current metadata
        local metadata
        metadata=$(read_gorka_metadata "$scope" 2>/dev/null)
        if [ $? -ne 0 ]; then
            print_warning "No gorka metadata found for $scope scope"
            return 0
        fi

        # Get available components from repository
        local available_servers=""
        local available_chatmodes=""
        local available_instructions=""

        if [ "$scope" = "global" ]; then
            available_servers=$(jq -r '.servers // {} | keys[]' "$FILES_DIR/mcp.json" 2>/dev/null || echo "")
        else
            available_servers=$(jq -r '.servers // {} | keys[]' "$FILES_DIR/mcp.workspace.json" 2>/dev/null || echo "")
        fi

        if [ -d "$FILES_DIR/agents" ]; then
            available_chatmodes=$(find "$FILES_DIR/agents" -name "*.md" -exec basename {} \; | tr '\n' '\n')
        fi

        if [ -d "$FILES_DIR/instructions" ] && [ "$scope" = "workspace" ]; then
            available_instructions=$(find "$FILES_DIR/instructions" -name "*.md" -exec basename {} \; | tr '\n' '\n')
        fi

        # Check for orphaned servers
        echo "$metadata" | jq -r '.servers // [] | .[]' 2>/dev/null | while read server; do
            if [ -n "$server" ] && ! echo "$available_servers" | grep -q "^$server$"; then
                print_info "Removing orphaned server: $server"

                # Remove from MCP file
                if [ -f "$mcp_file" ]; then
                    jq --arg server "$server" 'del(.servers[$server])' "$mcp_file" > "$mcp_file.tmp" && mv "$mcp_file.tmp" "$mcp_file"
                fi

                # Remove from gorka metadata
                remove_from_gorka_metadata "$scope" "servers" "$server"
                cleaned_count=$((cleaned_count + 1))
            fi
        done

        # Check for orphaned chatmodes
        echo "$metadata" | jq -r '.chatmodes // [] | .[]' 2>/dev/null | while read chatmode; do
            if [ -n "$chatmode" ] && ! echo "$available_chatmodes" | grep -q "^$chatmode$"; then
                print_info "Removing orphaned chatmode: $chatmode"
                if [ -f "$chatmodes_dir/$chatmode" ]; then
                    rm "$chatmodes_dir/$chatmode"
                fi
                remove_from_gorka_metadata "$scope" "chatmodes" "$chatmode"
                cleaned_count=$((cleaned_count + 1))
            fi
        done

        # Check for orphaned instructions (workspace only)
        if [ "$scope" = "workspace" ]; then
            echo "$metadata" | jq -r '.instructions // [] | .[]' 2>/dev/null | while read instruction; do
                if [ -n "$instruction" ] && ! echo "$available_instructions" | grep -q "^$instruction$"; then
                    print_info "Removing orphaned instruction: $instruction"
                    if [ -f "$instructions_dir/$instruction" ]; then
                        rm "$instructions_dir/$instruction"
                    fi
                    remove_from_gorka_metadata "$scope" "instructions" "$instruction"
                    cleaned_count=$((cleaned_count + 1))
                fi
            done
        fi
    }

    case "$target_scope" in
        "global")
            case "$(uname)" in
                "Darwin")  # macOS
                    VSCODE_USER_DIR="$HOME/Library/Application Support/Code/User"
                    ;;
                "Linux")
                    VSCODE_USER_DIR="$HOME/.config/Code/User"
                    ;;
                *)
                    print_error "Unsupported operating system"
                    return 1
                    ;;
            esac
            clean_orphans_for_scope "global" "$VSCODE_USER_DIR/mcp.json" "$VSCODE_USER_DIR/chatmodes" ""
            ;;
        "workspace")
            clean_orphans_for_scope "workspace" ".vscode/mcp.json" ".github/chatmodes" ".github/instructions"
            ;;
        "both"|"")
            case "$(uname)" in
                "Darwin")  # macOS
                    VSCODE_USER_DIR="$HOME/Library/Application Support/Code/User"
                    ;;
                "Linux")
                    VSCODE_USER_DIR="$HOME/.config/Code/User"
                    ;;
                *)
                    print_error "Unsupported operating system"
                    return 1
                    ;;
            esac
            clean_orphans_for_scope "global" "$VSCODE_USER_DIR/mcp.json" "$VSCODE_USER_DIR/chatmodes" ""
            clean_orphans_for_scope "workspace" ".vscode/mcp.json" ".github/chatmodes" ".github/instructions"
            ;;
        *)
            print_error "Invalid scope: $target_scope"
            print_info "Valid scopes: global, workspace, both"
            return 1
            ;;
    esac

    if [ $cleaned_count -eq 0 ]; then
        print_success "No orphaned components found"
    else
        print_success "Cleaned $cleaned_count orphaned component(s)"
    fi
}

# Function to upgrade the gorka binary itself
self_upgrade() {
    print_step "Starting gorka self-upgrade"

    # Get the path of the current gorka binary
    local current_binary="$(readlink -f "$0" 2>/dev/null || realpath "$0" 2>/dev/null || echo "$0")"
    local backup_binary="${current_binary}.backup.$(date +%s)"

    # Check write permissions
    if [ ! -w "$(dirname "$current_binary")" ]; then
        print_error "No write permission to upgrade gorka binary at: $current_binary"
        print_error "Try running with appropriate permissions or contact your system administrator"
        return 1
    fi

    # Get latest repository files
    print_info "Downloading latest gorka version..."
    local files_dir
    if ! files_dir=$(ensure_files_available); then
        print_error "Failed to download latest repository"
        return 1
    fi

    # Check if new binary exists and is different
    local new_binary="$files_dir/bin/gorka"
    if [ ! -f "$new_binary" ]; then
        print_error "New gorka binary not found in repository"
        return 1
    fi

    # Compare versions/checksums if possible
    if command -v sha256sum >/dev/null 2>&1; then
        local current_hash=$(sha256sum "$current_binary" | cut -d' ' -f1)
        local new_hash=$(sha256sum "$new_binary" | cut -d' ' -f1)
        if [ "$current_hash" = "$new_hash" ]; then
            print_success "Gorka is already up to date"
            return 0
        fi
    fi

    # Test new binary
    print_info "Validating new binary..."
    if ! "$new_binary" help >/dev/null 2>&1; then
        print_error "New binary failed validation test"
        return 1
    fi

    # Create backup
    print_info "Creating backup of current binary..."
    if ! cp "$current_binary" "$backup_binary"; then
        print_error "Failed to create backup"
        return 1
    fi

    # Replace binary (atomic operation)
    print_info "Installing new binary..."
    if ! cp "$new_binary" "$current_binary"; then
        print_error "Failed to install new binary, restoring backup..."
        cp "$backup_binary" "$current_binary"
        rm -f "$backup_binary"
        return 1
    fi

    # Set executable permissions
    chmod +x "$current_binary"

    # Test new installation
    if ! "$current_binary" help >/dev/null 2>&1; then
        print_error "New installation failed validation, restoring backup..."
        cp "$backup_binary" "$current_binary"
        chmod +x "$current_binary"
        rm -f "$backup_binary"
        return 1
    fi

    # Cleanup backup
    rm -f "$backup_binary"

    print_success "Gorka successfully upgraded!"
    print_info "New version installed at: $current_binary"

    # Test basic functionality
    print_info "Testing new installation..."
    if "$current_binary" help >/dev/null 2>&1; then
        print_success "Upgrade completed successfully"
    else
        print_warning "Upgrade completed but functionality test failed"
    fi
}

# Main script logic
case "$1" in
    "install")
        case "$2" in
            "")
                # Install workspace configuration
                install
                ;;
            *)
                echo "Usage: gorka install"
                echo ""
                echo "Commands:"
                echo "  gorka install - Install workspace MCP configuration + copy chatmodes/instructions to .github directory"
                echo "  gorka update  - Manage installed components"
                echo "  gorka self-upgrade - Upgrade gorka binary to latest version"
                echo "  gorka help    - Show help message"
                echo "  gorka clean   - Clean cached repository files"
                exit 1
                ;;
        esac
        ;;
    "update")
        case "$2" in
            "list")
                case "$3" in
                    "")
                        get_current_components "workspace"
                        ;;
                    "available")
                        get_available_components
                        ;;
                    *)
                        echo "Usage: gorka update list [available]"
                        exit 1
                        ;;
                esac
                ;;
            "sync")
                sync_components
                ;;
            "remove")
                remove_component "$3" "$4" "workspace"
                ;;
            "clean-orphans")
                clean_orphans "workspace"
                ;;
            "")
                echo "Usage: gorka update <command> [options]"
                echo ""
                echo "Update Commands:"
                echo "  gorka update list                                        - Show status of installed components"
                echo "  gorka update sync                                        - Sync with latest repository"
                echo "  gorka update remove <type> <name> [global|workspace]    - Remove gorka-managed component"
                echo "  gorka update clean-orphans                               - Remove orphaned components"
                echo ""
                echo "Component Types:"
                echo "  server       - MCP server"
                echo "  input        - MCP input"
                echo "  chatmode     - Chatmode file"
                echo "  instruction  - Instruction file"
                echo ""
                echo "Examples:"
                echo "  gorka update list"
                echo "  gorka update sync"
                echo "  gorka update remove server memory"
                echo "  gorka update clean-orphans"
                ;;
            *)
                echo "Unknown update command: $2"
                echo "Run 'gorka update' for usage information."
                exit 1
                ;;
        esac
        ;;
    "self-upgrade")
        self_upgrade
        ;;
    "help")
        echo "Usage: gorka <command> [options]"
        echo ""
        echo "Commands:"
        echo "  gorka install          - Install workspace MCP configuration + copy chatmodes/instructions to .github directory"
        echo "  gorka update           - Manage installed components (run 'gorka update' for details)"
        echo "  gorka self-upgrade     - Upgrade gorka binary to latest version"
        echo "  gorka help             - Show this help message"
        echo "  gorka clean            - Clean cached repository files"
        ;;
    "clean")
        clean_cache
        ;;
    *)
        echo "Usage: gorka <command> [options]"
        echo ""
        echo "Commands:"
        echo "  gorka install          - Install workspace MCP configuration + copy chatmodes/instructions to .github directory"
        echo "  gorka update           - Manage installed components (run 'gorka update' for details)"
        echo "  gorka self-upgrade     - Upgrade gorka binary to latest version"
        echo "  gorka help             - Show this help message"
        echo "  gorka clean            - Clean cached repository files"
        exit 1
        ;;
esac
