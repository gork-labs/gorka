name: Gorka Agent System Build & Release

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.24.4'

jobs:
  build:
    name: Build Cross-Platform Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        binary: [gorka, secondbrain-mcp]
        goos: [linux, darwin]
        goarch: [amd64, arm64]
        include:
          - binary: gorka
            goos: windows
            goarch: amd64
          - binary: secondbrain-mcp
            goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.sum

      - name: Generate embedded assets
        run: |
          echo "Generating embedded assets..."
          go generate ./internal/embedded/embedded-resources/behavioral-specs/
          echo "Assets generated successfully"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          BINARY_NAME="${{ matrix.binary }}"
          OUTPUT_NAME="${BINARY_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}"

          if [ "$GOOS" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi

          mkdir -p bin
          go build -v -ldflags="-s -w" -o "bin/${OUTPUT_NAME}" ./cmd/${{ matrix.binary }}

      - name: Archive binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/${{ matrix.binary }}_${{ matrix.goos }}_${{ matrix.goarch }}*

  auto-release:
    name: Auto Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      tag-name: ${{ steps.generate-tag.outputs.tag-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version tag
        id: generate-tag
        run: |
          # Generate timestamp-based version
          TIMESTAMP=$(date +"%Y.%m.%d.%H%M%S")
          TAG_NAME="v${TIMESTAMP}"
          echo "tag-name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG_NAME}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy all binaries from artifacts (both gorka and secondbrain-mcp)
          find artifacts -type f -name "gorka_*" -exec cp {} release-assets/ \;
          find artifacts -type f -name "secondbrain-mcp_*" -exec cp {} release-assets/ \;

          # Create checksums
          cd release-assets
          sha256sum * > checksums.txt

          # List all files for verification
          echo "Release assets prepared:"
          ls -la

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.generate-tag.outputs.tag-name }}
          name: "Gorka ${{ steps.generate-tag.outputs.tag-name }} - Auto Release"
          files: release-assets/*
          generate_release_notes: true
          body: |
            ## Gorka Agent System Auto Release

            This release was automatically created from the latest changes on the main branch.

            **Commit**: ${{ github.sha }}
            **Date**: ${{ github.event.head_commit.timestamp }}
            **Author**: ${{ github.event.head_commit.author.name }}

            ### Quick Installation

            Download and install with a single command:
            ```bash
            bash <(curl -fsSL https://raw.githubusercontent.com/gork-labs/gorka/main/install.sh)
            ```

            After installation, follow the displayed instructions to add `~/.local/bin` to your PATH.

            ### Manual Installation

            1. Download the appropriate binaries for your platform:
               - `gorka_<platform>` - Main CLI interface
               - `secondbrain-mcp_<platform>` - MCP server implementation

            2. Make them executable and place in your PATH:
            ```bash
            chmod +x secondbrain-*
            mv secondbrain-* ~/.local/bin/
            ```

            3. Update your PATH if needed:
            ```bash
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc  # or ~/.zshrc
            source ~/.bashrc  # or ~/.zshrc
            ```

            ### Available Platforms

            - Linux (amd64, arm64)
            - macOS (amd64, arm64)
            - Windows (amd64)

            ### Components Included

            - **gorka**: Command-line interface for agent management
            - **secondbrain-mcp**: Model Context Protocol server with behavioral matrices

            ### Verification

            Verify the integrity of downloaded binaries using the provided checksums:
            ```bash
            sha256sum -c checksums.txt
            ```

            ### Latest Changes

            ${{ github.event.head_commit.message }}

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
