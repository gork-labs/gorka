{"type":"entity","name":"GorkaCLI_OutputImprovement","entityType":"system","observations":["Improved gorka CLI output to be less noisy by using relative paths","Changed workspace installation outputs from full paths to relative paths","Updated: .vscode/mcp.json instead of /full/path/.vscode/mcp.json","Updated: .github/chatmodes instead of /full/path/.github/chatmodes","Updated: .github/instructions instead of /full/path/.github/instructions","Updated: .vscode/memory.json instead of /full/path/.vscode/memory.json","Kept system paths (VS Code user directory, cache) as full paths","Date: 2025-07-24","Time: 12:15:30 (Europe/Warsaw)","Author: @bohdan-shulha","File: bin/gorka","Improved user experience by showing concise, relevant paths","Maintained clarity about installation locations"]}
{"type":"entity","name":"GorkaAgentSystem_Implementation","entityType":"system","observations":["Project: Production Coding Agent System (Gorka)","Repository: gork-labs/gorka on GitHub","Language: Mixed (Bash, JSON, Markdown)","Date analyzed: 2025-07-24","Time analyzed: 12:29:35 (Europe/Warsaw)","Primary purpose: AI agent system for software development teams","Architecture: VS Code extension with MCP server integration","Installation method: One-liner curl script + gorka CLI","Agent count: 10 specialized agents","Core technology: Claude Sonnet-4 with extended thinking modes","Memory system: Local JSON-based knowledge graph","Configuration: Split between global and workspace-specific","Main entry point: setup.sh script and bin/gorka CLI tool"]}
{"type":"entity","name":"GorkaMCPConfiguration_Implementation","entityType":"system","observations":["Configuration split: Global (mcp.global.json) + Workspace (mcp.workspace.json)","Date analyzed: 2025-07-24 12:29:35 (Europe/Warsaw)","Global servers: sequentialthinking, context7, deepwiki, git, time","Workspace servers: memory (local knowledge graph)","sequentialthinking: Provides ultrathink modes via @modelcontextprotocol/server-sequential-thinking","context7: Documentation context via @upstash/context7-mcp","deepwiki: GitHub repo docs via https://mcp.deepwiki.com/sse","git: Git operations via uvx mcp-server-git","time: Timestamp handling via uvx mcp-server-time","memory: Local storage in .vscode/memory.json via @modelcontextprotocol/server-memory","Installation target: VS Code user settings (global) + workspace .vscode/","No custom endpoints or complex networking required","All servers use standard MCP protocol implementations"]}
{"type":"entity","name":"GorkaAgentArchitecture_Pattern","entityType":"concept","observations":["Pattern: Specialized agent roles with shared infrastructure","Date documented: 2025-07-24 12:29:35 (Europe/Warsaw)","Agent categories: Core Development (4), Operations & Support (3), System Maintenance (1), Specialized (2)","Core Development: Software Architect, Software Engineer, Test Engineer, Design Reviewer","Operations & Support: DevOps Engineer, Technical Writer, Security Engineer","System Maintenance: Memory Curator","Specialized: Database Architect, Prompt Writer","Shared resources: Memory Graph, Codebase access, Documentation","File location: chatmodes/ directory with .chatmode.md extensions","Naming convention: '[Role] - Gorka.chatmode.md'","Each agent has: Purpose, Key Features, Outputs definition","Cross-agent collaboration: Structured workflows and handoffs","Thinking modes: think, think hard, think harder, ultrathink","Multi-perspective analysis capability across all agents"]}
{"type":"entity","name":"GorkaInstallationSystem_Implementation","entityType":"process","observations":["Installation pattern: setup.sh downloads gorka CLI, then gorka install","Date analyzed: 2025-07-24 12:29:35 (Europe/Warsaw)","One-liner: curl -fsSL https://raw.githubusercontent.com/gork-labs/gorka/main/setup.sh | bash","CLI location: bin/gorka executable script","Installation modes: global, workspace, or both (auto-detect)","Global installation: Copies to VS Code user settings directory","Workspace installation: Creates .vscode/mcp.json in current project","File operations: Copies chatmodes/ and instructions/ to target locations","Target structure: .github/chatmodes/ and .github/instructions/ for workspace","CLI provides: install, help, and configuration management","No build process required - direct file copying","User configuration: TZ environment variable for Europe/Warsaw timezone","Dependency: VS Code with MCP support required"]}
{"type":"entity","name":"GorkaMemoryStrategy_Pattern","entityType":"concept","observations":["Memory pattern: Local knowledge graph with systematic management","Date documented: 2025-07-24 12:29:35 (Europe/Warsaw)","Storage: .vscode/memory.json per workspace","Entity naming: Consistent suffixes (_Concept, _Implementation, _Pattern, _Decision)","Query-before-create: Always search existing before creating new entities","Rich observations: 5-7 meaningful observations per entity minimum","Temporal tracking: Include creation/update timestamps in observations","Cross-references: Link to documents, code, and related systems","Relationship types: implements, documents, reviews, used_by, responsible_for","Maintenance: Weekly reviews by Memory Curator agent","Duplicate detection: Systematic merging of redundant entities","Domain insights: Pattern recognition across stored knowledge","Instructions: Detailed guidelines in MEMORY_USAGE_GUIDELINES_GORKA.instructions.md"]}
{"type":"entity","name":"GorkaDocumentationStructure_Implementation","entityType":"object","observations":["Documentation pattern: Comprehensive README with detailed sections","Date analyzed: 2025-07-24 12:29:35 (Europe/Warsaw)","Primary doc: README.md with 400+ lines covering full system","Instruction files: 4 shared guideline documents in instructions/","Agent documentation: Embedded in chatmode files + README descriptions","Structure: Installation -> Overview -> Agents -> Guidelines -> Technical details","Installation: Quick one-liner + detailed manual process","Agent docs: Purpose, Key Features, Outputs for each of 10 agents","Technical: MCP configuration, environment setup, troubleshooting","Best practices: Research first, strategic thinking modes, documentation","Sponsorship: Dedicated section for project supporters","Maintenance: Timestamp tracking with datetime MCP tool requirements","Accuracy: Reflects actual file structure and implementation reality"]}
{"type":"entity","entityType":"attribute","name":"GorkaPerformanceMetrics_Baseline","observations":["System performance targets documented","Date established: 2025-07-24 12:29:35 (Europe/Warsaw)","Simple queries: <5 seconds response time","Standard analysis: <30 seconds response time","Ultrathink mode: <2 minutes response time","Complex reviews: <5 minutes response time","Test coverage target: >80% for all implementations","Memory health score target: >85/100","Documentation completeness: Complete coverage required","Agent count: 10 specialized agents operational","MCP server count: 6 servers (5 global + 1 workspace)","Installation time: Minutes via one-liner script","Storage overhead: Minimal (.vscode/memory.json per workspace)"]}
{"type":"entity","entityType":"concept","name":"GorkaWorkflowPatterns_Strategy","observations":["Workflow strategy: Structured agent collaboration patterns","Date documented: 2025-07-24 12:29:35 (Europe/Warsaw)","Feature development: 10-step process from design to optimization","Complex problems: 5-step ultrathink + iteration cycle","Knowledge building: 5-step memory-driven learning cycle","Step sequence: Architect -> Security -> Database -> Review -> Engineer -> Test -> DevOps -> Writer -> Memory -> Prompt","Handoff points: Design approval, implementation completion, testing validation","Quality gates: Security review, performance validation, documentation completeness","Memory integration: Capture learnings at each step","Thinking mode selection: Based on complexity (simple/standard/ultrathink)","Cross-perspective analysis: Security, performance, maintainability, business, user","Iterative refinement: Initial solution -> critique -> enhancement -> optimization"]}
{"type":"entity","entityType":"concept","name":"GorkaTechnicalDecisions_Architecture","observations":["Architecture decisions documented in technical implementation","Date analyzed: 2025-07-24 12:29:35 (Europe/Warsaw)","VS Code integration: Chosen for developer familiarity and MCP support","MCP protocol: Standardized approach over custom APIs","Local storage: .vscode/memory.json over remote databases for simplicity","JSON configuration: Human-readable and version-controllable","Bash installation: Cross-platform compatibility with curl/bash ubiquity","No build system: Direct file copying for simplicity","Modular agents: Separate chatmode files for maintainability","Timezone standardization: Europe/Warsaw as project standard","Split configuration: Global vs workspace for flexibility","Standard MCP servers: Avoid custom implementations where possible","File-based instructions: Version-controlled guidelines over runtime config"]}
{"type":"relation","from":"GorkaAgentSystem_Implementation","to":"GorkaMCPConfiguration_Implementation","relationType":"depends_on"}
{"type":"relation","from":"GorkaAgentSystem_Implementation","to":"GorkaAgentArchitecture_Pattern","relationType":"implements"}
{"type":"relation","from":"GorkaInstallationSystem_Implementation","to":"GorkaMCPConfiguration_Implementation","relationType":"configures"}
{"type":"relation","from":"GorkaAgentArchitecture_Pattern","to":"GorkaMemoryStrategy_Pattern","relationType":"uses"}
{"type":"relation","from":"GorkaDocumentationStructure_Implementation","to":"GorkaAgentSystem_Implementation","relationType":"documents"}
{"type":"relation","from":"GorkaMemoryStrategy_Pattern","to":"GorkaMCPConfiguration_Implementation","relationType":"implemented_by"}